#  Copyright 2021 Google LLC

#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

clear
source globals



DESC="This process will create a simple yes or no question site using a Cloud Storage Bucket.
Obviously once you create this Cloud Storage Bucket based website, you can host any kind 
of content here."

print_title "YESORNOSITE INSTALL" "$DESC" "5"


get_project_id PROJECT

collectParamters DOMAIN "$1" "the domain of the yes or no site" 
collectParamters YESORNO "$2" "the answer for the site - yes or no" yes
collectParamters PROJECT "$3" "the id of the project that will host the site" "$PROJECT" 

gcloud config set project ${PROJECT}

BUCKET=$DOMAIN
BASENAME=${DOMAIN//./-}
CLOUDDNSZONE=$BASENAME-zone

printf $DIVIDER
printf "${CYAN}Project Details${NC} \n"
printf "Project ID:                 ${CYAN}$PROJECT${NC} \n"
printf "Domain:                     ${CYAN}$DOMAIN${NC} \n"
printf "Bucket:                     ${CYAN}$BUCKET${NC} \n"
printf "DNS Zone:                   ${CYAN}$CLOUDDNSZONE${NC} \n"




section_open "Enabling services in your GCP project"
gcloud services enable domains.googleapis.com 
gcloud services enable storage.googleapis.com 
gcloud services enable compute.googleapis.com 
gcloud services enable dns.googleapis.com 
section_close


INFO=$(gcloud beta domains registrations search-domains $DOMAIN  --format="csv(DOMAIN,AVAILABILITY,YEARLY_PRICE)" | grep "$DOMAIN," | grep ",AVAILABLE")

if [[ !($INFO) ]]
then

    DOMAINLISTED=$(gcloud domains list-user-verified | grep $DOMAIN | xargs)


    # Sneaky way of getting around ownersip issues for the service account. 
    if [ "$4" == "IGNOREOWNERSHIPFORTESTING" ]
    then
        DOMAINLISTED="IGNOREOWNERSHIPFORTESTING"
    fi

    if [[ !($DOMAINLISTED) ]]
    then
        printf "\nSorry, domain is not available, please try another \n"
	    exit 1;
    fi

    printf "\nDomain is not available, but we can verify that you own it, so we can use it. \n"
    ISOWNED=true
fi



if [[ !($ISOWNED) ]]
then
    IFS=$','
    INFOARR=($INFO)
    COST=${INFOARR[2]}

    printf "Domain is availabe \n"
    printf "Cost:  ${BCYAN}$COST${NC} \n"

    # Really want to hit home IF YOU DO THIS YOU WILL BE CHARGED. Don't want people buying domains they dont want.
    if [[ !($4) ]]
    then
        printf $DIVIDER
        printf "${BRED}Buying a domain is not reversable, saying 'y' will incur a charge of ${BCYAN}$COST${NC} ${BRED}for ${BCYAN}$DOMAIN${NC}${BRED}. Continue?${NC}\n"
        printf "${ONCYAN}(y or n)${NC} ?"
        read REPLY
        if [[ ! $REPLY =~ ^[Yy]$ ]]
        then
            printf "${BRED}Okay! Shut it down!${NC} \n"
            exit 1
        fi
    fi


    if [ ! -f contact.yaml ]
    then

        printf $DIVIDER
        printf "Domain registration requires some data. This process only asks for the mandatory ones. \n"
        printf "The domain will be registered with user privacy enabled, so that your contact info will not be public. \n"
        printf "This will create a file, so that you never have to do it again. \n"
        printf "This file will only exist locally, or in your Cloud Shell environment.  \n"

        EMAIL="$GITHUB_USER"
        collectAddressInfo EMAIL "email" "$EMAIL" 

        PHONE="+14155551234"
        collectAddressInfo PHONE "phone number" "$PHONE" "Please enter with country code - +1 555 555 5555 for US for example"

        COUNTRY="US"
        collectAddressInfo COUNTRY "country code" "$COUNTRY"

        POSTALCODE="95105"
        collectAddressInfo POSTALCODE "postal code" "$POSTALCODE"

        STATE=CA
        collectAddressInfo STATE "state or administrative area" "$STATE"

        CITY="San Francisco"
        collectAddressInfo CITY "city" "$CITY"

        ADDRESS="345 Spear Street"
        collectAddressInfo ADDRESS "address" "$ADDRESS"

        RECIPIENT="Googler"
        collectAddressInfo RECIPIENT "name" "$RECIPIENT"

        printf "allContacts: \n" > contact.yaml
        printf "  email: '$EMAIL' \n" >> contact.yaml
        printf "  phoneNumber: $PHONE' \n" >> contact.yaml
        printf "  postalAddress: \n" >> contact.yaml
        printf "    regionCode: '$COUNTRY' \n" >> contact.yaml
        printf "    postalCode: '$POSTALCODE' \n" >> contact.yaml
        printf "    administrativeArea: '$STATE' \n" >> contact.yaml
        printf "    locality: '$CITY' \n" >> contact.yaml
        printf "    addressLines: ['$ADDRESS'] \n" >> contact.yaml
        printf "    recipients: ['$RECIPIENT'] \n" >> contact.yaml
    fi
fi


section_open "Setting up Cloud DNS for your domain"
gcloud dns managed-zones create $CLOUDDNSZONE \
   --description="A DNS Zone for managing $DOMAIN" \
   --dns-name=$DOMAIN -q
section_close

# Added some logic to roll back if the process fails here.  Because if they are 
# registering a domain and it fails, everything else will fail. 
# The Bucket can't be created because you can't name it after the URL if you 
# dont own it. Then everything that depends on teh backend bucket fails. 
# Also made it roll back the DNS setting. 
FAILED=false
section_open "Registering Domain"
if [[ !($ISOWNED) ]]
then
    gcloud beta domains registrations register $DOMAIN  \
    --contact-privacy=private-contact-data --cloud-dns-zone=$CLOUDDNSZONE \
    --yearly-price=$COST --contact-data-from-file=contact.yaml || FAILED=true
else
    gcloud beta domains registrations configure dns $DOMAIN --cloud-dns-zone=$CLOUDDNSZONE
fi


if $FAILED
then
    printf $DIVIDER
    printf "Rolling back Cloud DNS for your domain \n"
    gcloud dns managed-zones delete $CLOUDDNSZONE  -q
    printf "Rolling back Cloud DNS for your domain - ${BCYAN}done${NC} \n"
    
    printf "\n${BRED}Sorry, Domain registration failed. ${WHITE}${ONRED}You have *NOT* been charged for the domain.${NC}\n"
    printf "${BRED}Could be an issue with the contact data.${NC}\n"
    printf "${BRED}You can fix the info in contact.yaml and re-run using this command:  ${NC}\n"
    printf "\n${BCYAN}$0 $DOMAIN $YESORNO $PROJECT  ${NC}\n\n"
    exit
fi

section_close

section_open "Waiting for domain to be active"
await_command state 5 60 "domainREADY" $DOMAIN 
section_close



section_open "Creating SSL Certificate"
gcloud compute ssl-certificates create $BASENAME-cert \
    --description="Cert for $BASENAME-microsite" \
    --domains=$DOMAIN --global
section_close

section_open "Creating External IP"
gcloud compute addresses create $BASENAME-ip \
	--network-tier=PREMIUM --ip-version=IPV4 --global
section_close

section_open "Creating Storage Bucket"
gsutil mb gs://$BUCKET
gsutil iam ch allUsers:objectViewer gs://$BUCKET 
gsutil web set -m index.html -e 404.html gs://$BUCKET 
section_close

section_open "Copying site to the bucket"
printf "Answer was: ${CYAN}$YESORNO${NC} \n"
if [ "$YESORNO" = "no" ]
then
    gsutil cp -r www/no/* gs://$BUCKET/	
else
    gsutil cp -r www/yes/* gs://$BUCKET/	
fi

section_close

section_open "Standing up Load Balancer"
gcloud compute backend-buckets create $BASENAME-be \
--gcs-bucket-name=$DOMAIN

gcloud compute url-maps create $BASENAME-lb  \
--default-backend-bucket=$BASENAME-be
section_close
	
section_open "Enabling HTTP"
gcloud compute target-http-proxies create $BASENAME-lb-proxy \
--url-map=$BASENAME-lb

gcloud compute forwarding-rules create $BASENAME-http-lb-forwarding-rule \
--address=$BASENAME-ip --global --target-http-proxy=$BASENAME-lb-proxy \
--ports=80
section_close

section_open "Enabling HTTPS"
gcloud compute target-https-proxies create $BASENAME-ssl-lb-proxy \
--url-map=$BASENAME-lb  --ssl-certificates $BASENAME-cert \
--global-ssl-certificates --global

gcloud compute forwarding-rules create $BASENAME-https-lb-forwarding-rule \
--address=$BASENAME-ip --global --target-https-proxy=$BASENAME-ssl-lb-proxy \
--ports=443
section_close


IP=$(gcloud compute addresses describe $BASENAME-ip --global --format="value(address)")


section_open "Setting DNS A Record"
gcloud dns record-sets transaction start --zone=$CLOUDDNSZONE

gcloud dns record-sets transaction add $IP --name=$DOMAIN \
   --ttl=60 --type=A --zone=$CLOUDDNSZONE

gcloud dns record-sets transaction execute --zone=$CLOUDDNSZONE
section_close

if [[ !($4) ]]
then
section_open "Waiting for website to be serving http"
await_command STATUS 5 60 "url200" $DOMAIN $IP
section_close
fi

printf $DIVIDER
printf "CONGRATS!!!!!!! \n"
printf "You have configured a project, spun up architecture, and deployed code.\n\n"
printf "See your site at:\n"
printf "${UCYAN}http://$DOMAIN${NC} \n"
printf "\nSecure version may take up to an hour to be ready, because of SSL cert provisioning process.  \n"
printf "${UCYAN}https://$DOMAIN${NC} \n"
printf $DIVIDER
