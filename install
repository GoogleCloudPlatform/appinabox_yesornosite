#  Copyright 2021 Google LLC

#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

clear
PROJECT=$(gcloud config get-value project | xargs)

BLACK='\033[0;30m'
WHITE='\033[1;37m'

CYAN='\033[0;36m'
BCYAN='\033[1;36m'
ONCYAN="\033[46m"
UCYAN='\033[4;36m' 

RED='\033[0;31m'
BRED='\033[1;31m'
ONRED="\033[41m"  
  
NC='\033[0m' # No Color
DIVIDER="*****************************************************************************************************\n"

# This will handle repetitive collection of data from the command line
function collectParamters(){
    local  __resultvar=$1
    local ARG=$2
    local VALUE=$2
    local LABEL=$3
    local DEFAULT=$4

    if [[ $ARG ]]
    then
        VALUE=$ARG
    else 
        # Allow user to overide the VALUE. 
        printf "Enter $LABEL"
        if  [[ $DEFAULT ]]
        then
            VALUE=$DEFAULT
            printf " [leave blank for ${CYAN}'${DEFAULT}'${NC}]"
        fi
        printf ": "
        read USER_VALUE

        if [[ $USER_VALUE ]]
        then
            VALUE=$USER_VALUE
        fi

    fi

    if [[ !($VALUE) ]]
    then
        printf "\n${BRED}Sorry, $LABEL is mandatory.${NC}\n"
        exit 1;
    fi

    eval $__resultvar="'$VALUE'"
}


# This will handle repetitive collection of data for the contact info
function collectAddressInfo(){
    local  __resultvar=$1
    local LABEL=$2
    local VALUE=$3
    local NOTE=$4

    printf "Enter your $LABEL [leave blank for ${CYAN}'${VALUE}'${NC}]\n"

    if [[ $NOTE ]]
    then
        printf "${ONCYAN}NOTE:${CYAN} $NOTE${NC}\n"
    fi

    printf ":"

    
    read USER_VALUE

    if [[ $USER_VALUE ]]
    then
        VALUE=$USER_VALUE
    fi

    if [[ !($VALUE) ]]
    then
        printf "\n${BRED}Sorry, $LABEL is mandatory.${NC}\n"
        exit 1;
    fi

    eval $__resultvar="'$VALUE'"
}

printf $DIVIDER
printf "${BCYAN}YESORNOSITE INSTALL${NC} \n"
printf "This process will create a simple yes or no question site using a Cloud Storage Bucket.\n"
printf "Obviously once you create this Cloud Storage Bucket based website, you can host any kind \n"
printf "of content here. \n"
printf $DIVIDER

collectParamters DOMAIN "$1" "the domain of the yes or no site" 
collectParamters YESORNO "$2" "the answer for the site - yes or no" yes
collectParamters PROJECT "$3" "the id of the project that will host the site" "$PROJECT" 

gcloud config set project ${PROJECT}

BUCKET=$DOMAIN
BASENAME=${DOMAIN//./-}
CLOUDDNSZONE=$BASENAME-zone

printf $DIVIDER
printf "${CYAN}Project Details${NC} \n"
printf "Project ID:                 ${CYAN}$PROJECT${NC} \n"
printf "Domain:                     ${CYAN}$DOMAIN${NC} \n"
printf "Bucket:                     ${CYAN}$BUCKET${NC} \n"
printf "DNS Zone:                   ${CYAN}$CLOUDDNSZONE${NC} \n"



printf $DIVIDER
printf "Enabling services in your GCP project \n"
gcloud services enable domains.googleapis.com 
gcloud services enable storage.googleapis.com 
gcloud services enable compute.googleapis.com 
gcloud services enable dns.googleapis.com 
printf "Enabling services in your GCP project - ${BCYAN}done${NC} \n"


INFO=$(gcloud beta domains registrations search-domains $DOMAIN  --format="csv(DOMAIN,AVAILABILITY,YEARLY_PRICE)" | grep "$DOMAIN," | grep ",AVAILABLE")

if [[ !($INFO) ]]
then

    DOMAINLISTED=$(gcloud domains list-user-verified | grep $DOMAIN | xargs)
    if [[ !($DOMAINLISTED) ]]
    then
        printf "\nSorry, domain is not available, please try another \n"
	    exit 1;
    fi

    printf "\nDomain is not available, but we can verify that you own it, so we can use it. \n"
    ISOWNED=true
fi

if [[ !($ISOWNED) ]]
then
    IFS=$','
    INFOARR=($INFO)
    COST=${INFOARR[2]}

    printf "Domain is availabe \n"
    printf "Cost:  ${BCYAN}$COST${NC} \n"

    # Really want to hit home IF YOU DO THIS YOU WILL BE CHARGED. Don't want people buying domains they dont want.
    if [[ !($4) ]]
    then
        printf $DIVIDER
        printf "${BRED}Buying a domain is not reversable, saying 'y' will inccur a charge of ${BCYAN}$COST${NC} ${BRED}for ${BCYAN}$DOMAIN${NC}${BRED}. Continue?${NC}\n"
        printf "${ONCYAN}(y or n)${NC} ?"
        read REPLY
        if [[ ! $REPLY =~ ^[Yy]$ ]]
        then
            printf "${BRED}Okay! Shut it down!${NC} \n"
            exit 1
        fi
    fi
fi


if [ ! -f contact.yaml ]
then

    printf $DIVIDER
    printf "Domain registration requires some data. This process only asks for the mandatory ones. \n"
    printf "The domain will be registered with user privacy enabled, so that your contact info will not be public. \n"
    printf "This will create a file, so that you never have to do it again. \n"
    printf "This file will only exist locally, or in your Cloud Shell environment.  \n"

    EMAIL=$GITHUB_USER
    collectAddressInfo EMAIL "email" $EMAIL 

    PHONE="+14155551234"
    collectAddressInfo PHONE "phone number" $PHONE "Please enter with country code - +1 555 555 5555 for US for example"

    COUNTRY=US
    collectAddressInfo COUNTRY "country code" $COUNTRY

    POSTALCODE=95105
    collectAddressInfo POSTALCODE "postal code" $POSTALCODE

    STATE=CA
    collectAddressInfo STATE "state or administrative area" $STATE

    CITY="San Francisco"
    collectAddressInfo CITY "city" $CITY

    ADDRESS="345 Spear Street"
    collectAddressInfo ADDRESS "address" $ADDRESS

    RECIPIENT="Googler"
    collectAddressInfo RECIPIENT "recipient" $RECIPIENT

    printf "allContacts: \n" > contact.yaml
    printf "  email: '$EMAIL' \n" >> contact.yaml
    printf "  phoneNumber: $PHONE' \n" >> contact.yaml
    printf "  postalAddress: \n" >> contact.yaml
    printf "    regionCode: '$COUNTY' \n" >> contact.yaml
    printf "    postalCode: '$POSTALCODE' \n" >> contact.yaml
    printf "    administrativeArea: '$STATE' \n" >> contact.yaml
    printf "    locality: '$CITY' \n" >> contact.yaml
    printf "    addressLines: ['$ADDRESS'] \n" >> contact.yaml
    printf "    recipients: ['$RECIPIENT'] \n" >> contact.yaml
fi


printf $DIVIDER
printf "Setting up Cloud DNS for your domain \n"
gcloud dns managed-zones create $CLOUDDNSZONE \
   --description="A DNS Zone for managing $DOMAIN" \
   --dns-name=$DOMAIN -q
printf "Setting up Cloud DNS for your domain - ${BCYAN}done${NC} \n"

# Added some logic to roll back if the process fails here.  Because if they are 
# registering a domain and it fails, everything else will fail. 
# The Bucket can't be created because you can't name it after the URL if you 
# dont own it. Then everything that depends on teh backend bucket fails. 
# Also made it roll back the DNS setting. 
FAILED=false
printf $DIVIDER
printf "Registering Domain \n"
if [[ !($ISOWNED) ]]
then
    gcloud beta domains registrations register $DOMAIN  \
    --contact-privacy=private-contact-data --cloud-dns-zone=$CLOUDDNSZONE \
    --yearly-price=$COST --contact-data-from-file=contact.yaml || FAILED=true
else
    gcloud beta domains registrations configure dns $DOMAIN --cloud-dns-zone=$CLOUDDNSZONE
fi


if $FAILED
then
    printf $DIVIDER
    printf "Rolling back Cloud DNS for your domain \n"
    gcloud dns managed-zones delete $CLOUDDNSZONE  -q
    printf "Rolling back Cloud DNS for your domain - ${BCYAN}done${NC} \n"
    
    printf "\n${BRED}Sorry, Domain registration failed. ${WHITE}${ONRED}You have *NOT* been charged for the domain.${NC}\n"
    printf "${BRED}Could be an issue with the contact data.${NC}\n"
    printf "${BRED}You can fix the info in contact.yaml and re-run using this command:  ${NC}\n"
    printf "\n${BCYAN}$0 $DOMAIN $YESORNO $PROJECT  ${NC}\n\n"
    exit
fi


printf "Registering Domain - ${BCYAN}done${NC} \n"

printf $DIVIDER
printf "Waiting for domain to be active \n"
state=$(gcloud beta domains registrations describe $DOMAIN --format="value(state)")
SECONDS=5
i=0
limit=60
while [ "$state" != "ACTIVE" ]
do
    i=$(( $i + 1 ))
    if [ $i -eq 1 ]
    then
        printf "Checking if domain is up"
    fi

    if [ $i -eq $limit ]
    then
        printf "Timed out \n"
        exit 1
    fi
    
    state=$(gcloud beta domains registrations describe $DOMAIN --format="value(state)")
    printf "."
    SLEEP $SECONDS
done

printf " - up \n"
printf "Waiting for domain to be active - ${BCYAN}done${NC}  \n"



printf $DIVIDER
printf "Creating SSL Certificate \n"
gcloud compute ssl-certificates create $BASENAME-cert \
    --description="Cert for $BASENAME-microsite" \
    --domains=$DOMAIN --global
printf "Creating SSL Certificate - ${BCYAN}done${NC} \n"

printf $DIVIDER
printf "Creating External IP \n"
gcloud compute addresses create $BASENAME-ip \
	--network-tier=PREMIUM --ip-version=IPV4 --global
printf "Creating External IP - ${BCYAN}done${NC} \n"

printf $DIVIDER
printf "Creating Storage Bucket \n"
gsutil mb gs://$BUCKET
gsutil iam ch allUsers:objectViewer gs://$BUCKET 
gsutil web set -m index.html -e 404.html gs://$BUCKET 

printf "Creating Storage Bucket - ${BCYAN}done${NC} \n"

printf $DIVIDER
printf "Copying site to the bucket \n"
printf "Answer was: ${CYAN}$YESORNO${NC} \n"
if [ "$YESORNO" = "no" ]
then
    gsutil cp -r www/no/* gs://$BUCKET/	
else
    gsutil cp -r www/yes/* gs://$BUCKET/	
fi

printf "Copying site to the bucket - ${BCYAN}done${NC} \n"

printf $DIVIDER
printf "Standing up Load Balancer \n"
gcloud compute backend-buckets create $BASENAME-be \
--gcs-bucket-name=$DOMAIN

gcloud compute url-maps create $BASENAME-lb  \
--default-backend-bucket=$BASENAME-be
printf "Standing up Load Balancer - ${BCYAN}done${NC} \n"
	
printf $DIVIDER
printf "Enabling HTTP \n"
gcloud compute target-http-proxies create $BASENAME-lb-proxy \
--url-map=$BASENAME-lb

gcloud compute forwarding-rules create $BASENAME-http-lb-forwarding-rule \
--address=$BASENAME-ip --global --target-http-proxy=$BASENAME-lb-proxy \
--ports=80
printf "Enabling HTTP - ${BCYAN}done${NC} \n"

printf $DIVIDER
printf "Enabling HTTPS \n"
gcloud compute target-https-proxies create $BASENAME-ssl-lb-proxy \
--url-map=$BASENAME-lb  --ssl-certificates $BASENAME-cert \
--global-ssl-certificates --global

gcloud compute forwarding-rules create $BASENAME-https-lb-forwarding-rule \
--address=$BASENAME-ip --global --target-https-proxy=$BASENAME-ssl-lb-proxy \
--ports=443
printf "Enabling HTTPS - ${BCYAN}done${NC} \n"


IP=$(gcloud compute addresses describe $BASENAME-ip --global --format="value(address)")


printf $DIVIDER
printf "Setting DNS A Record \n"
gcloud dns record-sets transaction start --zone=$CLOUDDNSZONE

gcloud dns record-sets transaction add $IP --name=$DOMAIN \
   --ttl=60 --type=A --zone=$CLOUDDNSZONE

gcloud dns record-sets transaction execute --zone=$CLOUDDNSZONE
printf "Setting DNS A Record - ${BCYAN}done${NC} \n"

printf $DIVIDER
printf "Waiting for website to be serving http \n"
STATUS=$(curl --write-out '%{http_code}' --resolve $DOMAIN:80:$IP --silent --output /dev/null http://$DOMAIN )
DURATION=5
i=0
limit=60
while [ $STATUS -ne 200 ]
do
    i=$(( $i + 1 ))

    if [ $i -eq $limit ]
    then
        printf "${BRED}Timed out${NC} \n"
        exit 1
    fi
    if [ $i -eq 1 ]
    then
        printf "Checking if site is up"
    fi
    
    
    STATUS=$(curl --write-out '%{http_code}' --resolve $DOMAIN:80:$IP --silent --output /dev/null http://$DOMAIN )
    printf "."
    SLEEP $DURATION
done

printf " - up \n"

printf "Waiting for website to be serving http - ${BCYAN}done${NC} \n"


printf $DIVIDER
printf "CONGRATS!!!!!!! \n"
printf "You have configured a project, spun up architecture, and deployed code.\n\n"
printf "See your site at:\n"
printf "${UCYAN}http://$DOMAIN${NC} \n"
printf "\nSecure version may take up to an hour to be ready, because of SSL cert provisioning process.  \n"
printf "${UCYAN}https://$DOMAIN${NC} \n"
printf $DIVIDER